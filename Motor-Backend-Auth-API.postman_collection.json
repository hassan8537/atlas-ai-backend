{
	"info": {
		"_postman_id": "motor-backend-auth-api",
		"name": "Motor Backend Auth API",
		"description": "Complete API collection for Motor Backend with authentication, S3 file management, and PDF document processing with embeddings",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "s3FileKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "documentId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the API is running"
			},
			"response": []
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Sign In (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test('Response has correct structure', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success', true);",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.data).to.have.property('token');",
									"    pm.expect(response.data).to.have.property('user');",
									"});",
									"",
									"// Save token and user ID",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.collectionVariables.set('authToken', response.data.token);",
									"        pm.collectionVariables.set('userId', response.data.user.id);",
									"        console.log('✅ Token saved:', response.data.token.substring(0, 20) + '...');",
									"        console.log('✅ User ID saved:', response.data.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@motor.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "Sign in with admin credentials (auto-saves token)"
					},
					"response": []
				},
				{
					"name": "Sign In (Custom User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.collectionVariables.set('authToken', response.data.token);",
									"        console.log('Token saved:', response.data.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "Sign in with custom user credentials"
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile data is returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('id');",
									"    pm.expect(response.data).to.have.property('email');",
									"    pm.expect(response.data).to.have.property('firstName');",
									"    pm.expect(response.data).to.have.property('lastName');",
									"});",
									"",
									"console.log('✅ Profile retrieved successfully');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Get current user profile (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Sign Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Sign out successful', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data.message).to.include('token invalidated');",
									"});",
									"",
									"console.log('✅ Sign out completed - token invalidated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/signout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signout"
							]
						},
						"description": "Sign out current user (requires authentication)"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Get all users (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('User created successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('id');",
									"    pm.expect(response.data).to.have.property('email');",
									"    pm.expect(response.data).to.not.have.property('password');",
									"});",
									"",
									"console.log('✅ User created successfully');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"phone\": \"1234567890\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Get user by ID"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"phone\": \"0987654321\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Update user by ID"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Delete user by ID"
					},
					"response": []
				},
				{
					"name": "Get User by Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/email/admin@motor.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"email",
								"admin@motor.com"
							]
						},
						"description": "Get user by email address"
					},
					"response": []
				}
			],
			"description": "User management endpoints"
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "401 - Unauthorized Access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Test unauthorized access (no token)"
					},
					"response": []
				},
				{
					"name": "401 - Invalid Credentials",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"wrong@email.com\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "Test invalid login credentials"
					},
					"response": []
				},
				{
					"name": "422 - Validation Error",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"missing-password\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "Test validation error (missing fields)"
					},
					"response": []
				},
				{
					"name": "404 - Not Found",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/nonexistent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nonexistent"
							]
						},
						"description": "Test 404 error for non-existent endpoint"
					},
					"response": []
				}
			],
			"description": "Test error scenarios and status codes"
		},
		{
			"name": "S3 File Management",
			"item": [
				{
					"name": "Get Upload URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Upload URL response is valid', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('uploadUrl');",
									"    pm.expect(response.data).to.have.property('key');",
									"    pm.expect(response.data).to.have.property('fileName');",
									"    pm.expect(response.data).to.have.property('expiresIn');",
									"});",
									"",
									"pm.test('File name is sanitized', function () {",
									"    const response = pm.response.json();",
									"    const fileName = response.data.fileName;",
									"    // Should not contain spaces or special characters except dots, dashes, underscores",
									"    pm.expect(fileName).to.match(/^[a-zA-Z0-9._-]+$/);",
									"    // Should not start or end with dots or dashes",
									"    pm.expect(fileName).to.not.match(/^[.-]|[.-]$/);",
									"});",
									"",
									"// Save file key for later use",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.key) {",
									"        pm.collectionVariables.set('s3FileKey', response.data.key);",
									"        console.log('✅ S3 file key saved:', response.data.key);",
									"        console.log('✅ Upload URL generated, expires in:', response.data.expiresIn, 'seconds');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileName\": \"test-document-{{$timestamp}}.pdf\",\n  \"contentType\": \"application/pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/s3/upload-url",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"s3",
								"upload-url"
							]
						},
						"description": "Get pre-signed URL for PDF file upload"
					},
					"response": []
				},
				{
					"name": "Get Upload URL - File Name Sanitization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Problematic file name is sanitized', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    const fileName = response.data.fileName;",
									"    ",
									"    // Should not contain spaces, special characters, or problematic chars",
									"    pm.expect(fileName).to.match(/^[a-zA-Z0-9._-]+$/);",
									"    pm.expect(fileName).to.not.include(' ');",
									"    pm.expect(fileName).to.not.include('@');",
									"    pm.expect(fileName).to.not.include('#');",
									"    pm.expect(fileName).to.not.include('$');",
									"    ",
									"    console.log('Original: my file@name#with$spaces&symbols.pdf');",
									"    console.log('Sanitized:', fileName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileName\": \"my file@name#with$spaces&symbols.pdf\",\n  \"contentType\": \"application/pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/s3/upload-url",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"s3",
								"upload-url"
							]
						},
						"description": "Test file name sanitization with problematic characters including spaces, symbols, and special characters"
					},
					"response": []
				},
				{
					"name": "Delete File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('File deleted successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data.message).to.include('deleted successfully');",
									"});",
									"",
									"console.log('✅ File deleted from S3');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/s3/file/{{s3FileKey}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"s3",
								"file",
								"{{s3FileKey}}"
							]
						},
						"description": "Delete file from S3 bucket"
					},
					"response": []
				},
				{
					"name": "Get File URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('File URL returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('fileUrl');",
									"    pm.expect(response.data.fileUrl).to.include('s3');",
									"});",
									"",
									"console.log('✅ File URL retrieved');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/s3/file-url/{{s3FileKey}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"s3",
								"file-url",
								"{{s3FileKey}}"
							]
						},
						"description": "Get public file URL"
					},
					"response": []
				},
				{
					"name": "Get Download URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Download URL returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('downloadUrl');",
									"    pm.expect(response.data.downloadUrl).to.include('amazonaws.com');",
									"});",
									"",
									"console.log('✅ Download URL retrieved');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/s3/download-url/{{s3FileKey}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"s3",
								"download-url",
								"{{s3FileKey}}"
							]
						},
						"description": "Get pre-signed download URL"
					},
					"response": []
				}
			],
			"description": "S3 file upload and management endpoints"
		},
		{
			"name": "Document Processing",
			"item": [
				{
					"name": "Process PDF Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Document processing started', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('document');",
									"    pm.expect(response.data.document).to.have.property('id');",
									"    pm.expect(response.data.document).to.have.property('processingStatus');",
									"});",
									"",
									"// Save document ID for later use",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.document.id) {",
									"        pm.collectionVariables.set('documentId', response.data.document.id);",
									"        console.log('✅ Document ID saved:', response.data.document.id);",
									"        console.log('✅ Processing status:', response.data.document.processingStatus);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"s3Key\": \"{{s3FileKey}}\",\n  \"fileName\": \"test-document-{{$timestamp}}.pdf\",\n  \"contentType\": \"application/pdf\",\n  \"fileSize\": 12345\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents",
								"process"
							]
						},
						"description": "Process uploaded PDF document and create page-by-page embeddings. Note: The file must be actually uploaded to S3 using the pre-signed URL before calling this endpoint. Full text is not stored at document level, only page content in embeddings."
					},
					"response": []
				},
				{
					"name": "Process Document - Non-existent File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message contains S3 key info\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include(\"does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"s3Key\": \"non-existent-file.pdf\",\n    \"fileName\": \"test-non-existent.pdf\",\n    \"contentType\": \"application/pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents",
								"process"
							]
						},
						"description": "Test error handling when trying to process a document that doesn't exist in S3. This should return a 400 error with appropriate message."
					},
					"response": []
				},
				{
					"name": "Get All Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Documents list returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('documents');",
									"    pm.expect(response.data).to.have.property('count');",
									"    pm.expect(response.data.documents).to.be.an('array');",
									"});",
									"",
									"console.log('✅ Documents retrieved, count:', pm.response.json().data.count);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents"
							]
						},
						"description": "Get all processed documents"
					},
					"response": []
				},
				{
					"name": "Get Document by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Document details returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('document');",
									"    pm.expect(response.data.document).to.have.property('id');",
									"    pm.expect(response.data.document).to.have.property('name');",
									"    pm.expect(response.data.document).to.have.property('s3Url');",
									"    // Verify extractedText is not included (now stored only in embeddings)",
									"    pm.expect(response.data.document).to.not.have.property('extractedText');",
									"});",
									"",
									"console.log('✅ Document details retrieved');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/documents/{{documentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents",
								"{{documentId}}"
							]
						},
						"description": "Get document by ID with embeddings"
					},
					"response": []
				},
				{
					"name": "Get Document Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Document status returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('processingStatus');",
									"    pm.expect(response.data).to.have.property('totalPages');",
									"    pm.expect(response.data).to.have.property('embeddingCount');",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('✅ Processing status:', response.data.processingStatus);",
									"console.log('📄 Total pages:', response.data.totalPages);",
									"console.log('🔗 Embedding count:', response.data.embeddingCount);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/documents/{{documentId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents",
								"{{documentId}}",
								"status"
							]
						},
						"description": "Get document processing status"
					},
					"response": []
				},
				{
					"name": "Delete Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Document deleted successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('message');",
									"    pm.expect(response.data).to.have.property('details');",
									"    pm.expect(response.data.details).to.have.property('deletedEmbeddings');",
									"    pm.expect(response.data.details).to.have.property('s3Deleted');",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('✅ Document deleted');",
									"console.log('🗑️ Embeddings deleted:', response.data.details.deletedEmbeddings);",
									"console.log('☁️ S3 deleted:', response.data.details.s3Deleted);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/documents/{{documentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents",
								"{{documentId}}"
							]
						},
						"description": "Delete document from S3 and database with all embeddings"
					},
					"response": []
				}
			],
			"description": "Document processing and management endpoints - processes PDF files, extracts text page-by-page, creates embeddings, and stores them efficiently without document-level text duplication"
		},
		{
			"name": "Complete API Test Flow",
			"item": [
				{
					"name": "1. Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Server is running', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('OK');",
									"});",
									"console.log('🏥 Health check passed');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						}
					}
				},
				{
					"name": "2. Sign In Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin sign in successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.collectionVariables.set('authToken', response.data.token);",
									"});",
									"console.log('🔐 Admin authenticated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@motor.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					}
				},
				{
					"name": "3. Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log('👤 Profile accessed');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					}
				},
				{
					"name": "4. Get S3 Upload URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Upload URL generated', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('s3FileKey', response.data.key);",
									"});",
									"console.log('📤 S3 upload URL ready');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileName\": \"test-document-{{$timestamp}}.pdf\",\n  \"contentType\": \"application/pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/s3/upload-url",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"s3",
								"upload-url"
							]
						}
					}
				},
				{
					"name": "5. Process PDF Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Document processing started', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('documentId', response.data.document.id);",
									"});",
									"console.log('📄 Document processing initiated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"s3Key\": \"{{s3FileKey}}\",\n  \"fileName\": \"test-document-{{$timestamp}}.pdf\",\n  \"contentType\": \"application/pdf\",\n  \"fileSize\": 12345\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents",
								"process"
							]
						}
					}
				},
				{
					"name": "6. Check Document Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Document status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log('� Document status checked');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/documents/{{documentId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents",
								"{{documentId}}",
								"status"
							]
						}
					}
				},
				{
					"name": "7. Get All Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Documents list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log('📚 Documents list retrieved');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"documents"
							]
						}
					}
				},
				{
					"name": "8. Sign Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Sign out successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log('🚪 Signed out - token invalidated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/signout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signout"
							]
						}
					}
				}
			],
			"description": "Complete test flow covering all major API endpoints - authentication, S3 file management, PDF document processing with page-based embeddings, and proper cleanup"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
